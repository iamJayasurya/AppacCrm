{"ast":null,"code":"var _jsxFileName = \"F:\\\\crm01\\\\appac-crm\\\\src\\\\component\\\\Login.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login({\n  isVisible\n}) {\n  _s();\n  const [currentTime, setCurrentTime] = useState(new Date());\n  const [user, setUserdata] = useState({\n    username: \"\",\n    password: \"\"\n  });\n  const empid = user.username; // Assuming username is empid in your logic\n  const password = user.password;\n  const onLogin = () => {\n    fetch('http://localhost:8000/testapi/v1/login', {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        empid,\n        // Sending empid (which is username in your case)\n        password\n      })\n    }).then(res => res.json()) // Parse JSON response\n    .then(data => {\n      console.log(empid);\n      if (data && data.success) {\n        // Check if the user's empid matches and the password is correct\n        if (data.empid === empid && data.password === password) {\n          alert('User is present, login successful');\n        } else {\n          alert('Invalid credentials');\n        }\n      } else {\n        alert('User not found or incorrect credentials');\n      }\n    }).catch(error => {\n      console.error(`Error fetching data:'  ${error}`);\n    });\n  };\n  // Update the current time every second\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setCurrentTime(new Date());\n    }, 1000);\n\n    // Cleanup the interval on component unmount\n    return () => clearInterval(timer);\n  }, []);\n  const hours = currentTime.getHours();\n  const min = currentTime.getMinutes();\n  const sec = currentTime.getSeconds();\n  const onInputchange = event => {\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target;\n    setUserdata(prevstate => ({\n      ...prevstate,\n      [name]: type === 'checkbox' ? checked : value\n    }));\n  };\n\n  // Conditional styling based on visibility\n  const loginStyle = {\n    display: isVisible ? 'block' : 'none',\n    zIndex: isVisible ? '100' : '0' // Set z-index to 100 when visible, 0 when hidden\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loginPage\",\n    style: loginStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-div\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"currentTime\",\n        children: `${hours} : ${min < 10 ? '0' + min : min} : ${sec < 10 ? '0' + sec : sec}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"currentday\",\n        children: \"Saturday August 31 2024\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://appacmedia.com/images/appac-logo-new.svg\",\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"wel-hed\",\n        children: \"WELCOME TO NEW BETA VERSION\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"username\",\n        \"aria-required\": true,\n        placeholder: \"username\",\n        id: \"username\",\n        onBeforeInput: onInputchange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\",\n        id: \"password\",\n        onChange: onInputchange,\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"for-pass\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Forgot Password?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        to: \"/\",\n        className: \"loginbutton\",\n        onClick: onLogin // Trigger the function passed from the Main component\n        ,\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"dybC7/X9R+8dEsxhc5R19eRYKZ8=\");\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Login","isVisible","_s","currentTime","setCurrentTime","Date","user","setUserdata","username","password","empid","onLogin","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","success","alert","catch","error","timer","setInterval","clearInterval","hours","getHours","min","getMinutes","sec","getSeconds","onInputchange","event","name","value","type","checked","target","prevstate","loginStyle","display","zIndex","className","style","children","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","placeholder","id","onBeforeInput","required","onChange","to","onClick","_c","$RefreshReg$"],"sources":["F:/crm01/appac-crm/src/component/Login.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\n\r\n\r\nfunction Login({ isVisible }) {\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [user , setUserdata] = useState({\r\n    username:\"\",\r\n      password:\"\"\r\n  })\r\n  const empid = user.username;  // Assuming username is empid in your logic\r\nconst password = user.password;\r\n\r\nconst onLogin = () => {\r\n    fetch('http://localhost:8000/testapi/v1/login', {\r\n        method: 'PUT',\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({\r\n            empid,  // Sending empid (which is username in your case)\r\n            password,\r\n          \r\n\r\n        })\r\n       \r\n    })\r\n    .then((res) => res.json())  // Parse JSON response\r\n    .then((data) => {\r\n      console.log(empid);\r\n        if (data && data.success) {\r\n          \r\n            // Check if the user's empid matches and the password is correct\r\n            if (data.empid === empid && data.password === password) {\r\n                alert('User is present, login successful');\r\n            } else {\r\n                alert('Invalid credentials');\r\n            }\r\n        } else {\r\n            alert('User not found or incorrect credentials');\r\n        }\r\n    })\r\n    .catch(error => {\r\n        console.error(`Error fetching data:'  ${error}`)\r\n    })\r\n  }\r\n  // Update the current time every second\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 1000);\r\n\r\n    // Cleanup the interval on component unmount\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  const hours = currentTime.getHours();\r\n  const min = currentTime.getMinutes();\r\n  const sec = currentTime.getSeconds();\r\n  \r\n  const onInputchange=(event)=>{\r\n    const { name, value, type, checked } = event.target;\r\n    setUserdata((prevstate)=> ({\r\n      ...prevstate,\r\n      [name]: type === 'checkbox' ? checked : value,\r\n\r\n    }));\r\n  }\r\n\r\n  // Conditional styling based on visibility\r\n  const loginStyle = {\r\n    display: isVisible ? 'block' : 'none',\r\n    zIndex: isVisible ? '100' : '0',  // Set z-index to 100 when visible, 0 when hidden\r\n  };\r\n\r\n  return (\r\n    <div className='loginPage' style={loginStyle}>\r\n      <div className=\"login-div\">\r\n        <p className='currentTime'>{`${hours} : ${min < 10 ? '0' + min : min} : ${sec < 10 ? '0' + sec : sec}`}</p>\r\n        <p className='currentday'>Saturday August 31 2024</p>\r\n        <img src='https://appacmedia.com/images/appac-logo-new.svg' alt=\"Logo\"/>\r\n        <p className='wel-hed'>WELCOME TO NEW BETA VERSION</p>\r\n\r\n        <input \r\n          type='text' \r\n          name='username'\r\n          aria-required \r\n          placeholder='username' \r\n          id=\"username\"\r\n          onBeforeInput={onInputchange}\r\n          required\r\n        /><br />\r\n\r\n        <input \r\n          type='password' \r\n          name=\"password\"\r\n          placeholder='Password' \r\n          id=\"password\"\r\n          onChange={onInputchange}\r\n          required\r\n        />\r\n\r\n        <p className='for-pass'>\r\n          <button>Forgot Password?</button>\r\n        </p>\r\n\r\n        <button to='/'\r\n          className='loginbutton' \r\n          onClick={onLogin}  // Trigger the function passed from the Main component\r\n        >\r\n          Login\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}